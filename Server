import socketserver, sys
import datetime
import json
import ast
import socket
import time
from threading import Timer
from collections import defaultdict
from pprint import pprint

my_unix_command = ['bc']
HOST = '0.0.0.0'
PORT = 2000

activeAlarms = defaultdict(lambda: {})
timers = {}
pastAlarms = defaultdict(lambda: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: []})
authorizations = defaultdict(list)
invites = defaultdict(list)
users = []

with open('activeAlarms.txt', 'r') as f:
    s = f.read()
    if len(s) > 0:
        activeAlarms.update(json.loads(s))

#Check if any alarm has already timedout
for u in list(activeAlarms):
    if datetime.datetime.now() > datetime.datetime.fromtimestamp(activeAlarms[u]['alarm']):
        activeAlarms.pop(u, None)

with open('pastAlarms.txt', 'r') as f:
    s = f.read()
    if len(s) > 0:
        pastAlarms.update(ast.literal_eval(s))

with open('authorizations.txt', 'r') as f:
    s = f.read()
    if len(s) > 0:
        authorizations.update(ast.literal_eval(s))

with open('users.txt', 'r') as f:
    s = f.read()
    if len(s) > 0:
        users = ast.literal_eval(s)

with open('invites.txt', 'r') as f:
    s = f.read()
    if len(s) > 0:
        invites.update(ast.literal_eval(s))

print(activeAlarms)
print(users)
print(pastAlarms)
print(authorizations)


def triggerAlarm(username, settings):
    #TODO: Broadcast
    #Missing the alarm settings
    print(username)
    print(username)
    print(username)

    bc_server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    bc_server.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    # Set a timeout so the socket does not block
    # indefinitely when trying to receive data.
    #TODO: test this
    bc_server.settimeout(0.2)
    bc_server.bind((HOST, PORT))
    message = {
        'user': username,
        'settings': settings,
    }

    #TODO: change the loop cond
    while True:
        bc_server.sendto(message.encode('utf-8'), ('<broadcast>', 37020))
        print("message sent!")
        time.sleep(1)


class SingleTCPHandler(socketserver.BaseRequestHandler):
    "One instance per connection.  Override handle(self) to customize action."
    def handle(self):
        # self.request is the client connection
        data = self.request.recv(1024)  # clip input at 1Kb
        text = data.decode('utf-8')
        pprint(json.loads(text))
        jsonRequest = json.loads(text)

        if jsonRequest['msgType'] == 'newUser':

            if jsonRequest['user'] not in users:
                users.append(jsonRequest['user'])
                with open('users.txt', 'w') as file:
                    file.write(json.dumps(users))

        if jsonRequest['msgType'] == 'newAlarm':

            user = jsonRequest['user']

            alarm = datetime.datetime.fromtimestamp(jsonRequest['alarm']/1000)
            settings = jsonRequest['settings']

            entry = {
                'alarm': alarm.timestamp(),
                'settings': jsonRequest['settings']
            }

            #Override the current active alarm for the user as only one is can be active
            activeAlarms[jsonRequest['user']] = entry

            with open('activeAlarms.txt', 'w') as file:
                file.write(json.dumps(activeAlarms))

            time = alarm - datetime.datetime.now()

            pprint("alarm: "+str(alarm))
            pprint("now: "+str(datetime.datetime.now()))
            pprint("seconds: "+str(time.seconds))

            if user in timers:
                if timers[user] is not None:
                    timers[user].cancel()

            pprint("timers: "+str(timers))

            t = Timer(time.seconds, triggerAlarm, [user, settings])
            t.start()

            timers[user] = t

        if jsonRequest['msgType'] == 'getAlarms':

            user = jsonRequest['user']
            others_flag = jsonRequest['controlledUsers']

            #Here I will either send mine or all my controlled

            if others_flag:
                pprint(authorizations)
                pprint(activeAlarms)
                alarms = []
                if user in authorizations:
                    for u in authorizations[user]:
                        alarm_to_send = {}
                        if u in activeAlarms:
                            auxalarm = datetime.datetime.fromtimestamp(activeAlarms[u]['alarm'])
                            alarm_to_send = {'hour': auxalarm.hour,
                                           'minute': auxalarm.minute}
                        alarms.append((u, alarm_to_send))
                pprint(alarms)
                self.request.send(json.dumps(alarms).encode('utf-8'))

            if not others_flag:
                if user in activeAlarms:
                    self.request.send(json.dumps(activeAlarms[user]).encode('utf-8'))

        if jsonRequest['msgType'] == 'getStatistics':

            #TODO: this must be reviewed, new statistics data

            user = jsonRequest['user']
            statistics = {}

            if user in pastAlarms:
                for a in pastAlarms[user]:
                    if len(pastAlarms[user][a]) > 0:
                        avg = sum(pastAlarms[user][a])/len(pastAlarms[user][a])
                        statistics[a] = avg

            self.request.send(json.dumps(statistics).encode('utf-8'))

        if jsonRequest['msgType'] == 'getUsers':

            control_flag = jsonRequest['all']
            user = jsonRequest['user']

            if control_flag:
                self.request.send(json.dumps(authorizations[user]))

            if not control_flag:
                other_users = []
                if user in authorizations:
                    for u in users:
                        if u not in authorizations[user]:
                            other_users.append(u)
                else:
                    other_users = users.copy()
                other_users.remove(user)
                self.request.send(json.dumps(other_users).encode('utf-8'))

        if jsonRequest['msgType'] == 'invite':

            user = jsonRequest['user']
            invite_user = jsonRequest['invited']

            pprint(invites)
            if user not in invites[invite_user]:
                invites[invite_user].append(user)

            self.request.send('OK'.encode('utf-8'))

            with open('invites.txt', 'w') as file:
                file.write(json.dumps(invites))

        if jsonRequest['msgType'] == 'getInvites':

            pprint(str(invites))

            user = jsonRequest['user']

            self.request.send(json.dumps(invites[user]).encode('utf-8'))

        if jsonRequest['msgType'] == 'acceptInvite':

            user = jsonRequest['user']
            invite_from = jsonRequest['inviteFrom']

            pprint(authorizations)

            authorizations[invite_from].append(user)
            invites[user].remove(invite_from)

            pprint(authorizations)

            with open('invites.txt', 'w') as file:
                file.write(json.dumps(invites))

            with open('authorizations.txt', 'w') as file:
                file.write(json.dumps(authorizations))

            pprint("hello")

        if jsonRequest['msgType'] == 'triggerAlarm':
            #TODO: test this
            user = jsonRequest['user']
            alarm = activeAlarms.pop(user, None)

            waking_time = datetime.datetime.now() - alarm
            computed_time = waking_time.minute + waking_time.seconds/60

            pastAlarms[user][alarm.weekday()+1].append(computed_time)

        #self.request.send('OK'.encode('utf-8'))
        self.request.close()


class SimpleServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    # Ctrl-C will cleanly kill all spawned threads
    daemon_threads = True
    # much faster rebinding
    allow_reuse_address = True

    def __init__(self, server_address, RequestHandlerClass):
        socketserver.TCPServer.__init__(self, server_address, RequestHandlerClass)


if __name__ == "__main__":
    server = SimpleServer((HOST, PORT), SingleTCPHandler)
    # terminate with Ctrl-C
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        sys.exit(0)
