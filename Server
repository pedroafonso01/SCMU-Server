import socketserver, sys
from collections import defaultdict
from pprint import pprint
import json
import ast

my_unix_command = ['bc']
HOST = '0.0.0.0'
PORT = 2000

#Falta ler do ficheiro
alarms = defaultdict(lambda: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: []})

with open('alarms.txt', 'r') as f:
    s = f.read()
    alarms = ast.literal_eval(s)

print(alarms)

class SingleTCPHandler(socketserver.BaseRequestHandler):
    "One instance per connection.  Override handle(self) to customize action."
    def handle(self):
        # self.request is the client connection
        data = self.request.recv(1024)  # clip input at 1Kb
        text = data.decode('utf-8')
        pprint(json.loads(text))
        jsonRequest = json.loads(text)

        if jsonRequest['msgType'] == 'newAlarm':

            entry = {
                'hour': jsonRequest['hours'],
                'minute': jsonRequest['minutes'],
            }

            alarms[jsonRequest['user']][str(jsonRequest['weekday'])].append(entry)

            with open('alarms.txt', 'w') as file:
                file.write(json.dumps(alarms))

            #Here should communicate with the arduino

        if jsonRequest['msgType'] == 'getMyAlarms':

            self.request.send(json.dumps(alarms[jsonRequest['user']]).encode('utf-8'))

        if jsonRequest['msgType'] == 'getOthersAlarms':

            self.request.send(json.dumps(list(alarms.keys())).encode('utf-8'))

        #self.request.send('OK'.encode('utf-8'))
        self.request.close()


class SimpleServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    # Ctrl-C will cleanly kill all spawned threads
    daemon_threads = True
    # much faster rebinding
    allow_reuse_address = True

    def __init__(self, server_address, RequestHandlerClass):
        socketserver.TCPServer.__init__(self, server_address, RequestHandlerClass)


if __name__ == "__main__":
    server = SimpleServer((HOST, PORT), SingleTCPHandler)
    # terminate with Ctrl-C
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        sys.exit(0)
